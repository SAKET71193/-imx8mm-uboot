CONFIG_SYS_MMCSD_FS_BOOT_PARTITION=y
CONFIG_BOOTCOMMAND="run ramsize_check; mmc dev ${mmcdev}; if mmc rescan; then if test ${use_m4} = yes && run loadm4bin; then run runm4bin; fi; if run loadbootscript; then run bootscript; else if run loadimage; then run mmcboot; else run netboot; fi; fi; else booti ${loadaddr} - ${fdt_addr}; fi;"
CONFIG_IMX_CONFIG="arch/arm/mach-imx/imx8m/imximage.cfg"
CONFIG_SYS_FSL_ESDHC_ADDR=0
CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_SECTOR=y
CONFIG_IS_MODULE(option)="config_enabled(CONFIG_VAL(option ##_MODULE))"
CONFIG_SYS_LOAD_ADDR=$(CONFIG_LOADADDR)
CONFIG_SYS_FSL_MAX_NUM_OF_SEC=y
CONFIG_SYS_HELP_CMD_WIDTH=10
CONFIG_SYS_CBSIZE=2048
CONFIG_SYS_MONITOR_LEN="SZ_512K"
CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR="(0x300 + CONFIG_SECONDARY_BOOT_SECTOR_OFFSET)"
CONFIG_CMD_USB_MASS_STORAGE=y
CONFIG_SYS_FSL_SEC_ADDR="(CAAM_IPS_BASE_ADDR + CONFIG_SYS_FSL_SEC_OFFSET)"
CONFIG_ENV_OVERWRITE=y
CONFIG_SYS_MALLOC_LEN="SZ_32M"
CONFIG_SYS_MMC_ENV_DEV=y
CONFIG_SYS_I2C_SPEED=100000
CONFIG_USB_FUNCTION_MASS_STORAGE=y
CONFIG_IMX_BOOTAUX=y
CONFIG_USB_GADGET_MASS_STORAGE=y
CONFIG_SYS_BARGSIZE=$(CONFIG_SYS_CBSIZE)
CONFIG_IS_BUILTIN(option)="config_enabled(CONFIG_VAL(option))"
CONFIG_MXC_USB_PORTSC="(PORT_PTS_UTMI | PORT_PTS_PTW)"
CONFIG_SYS_FSL_JR0_ADDR="(CONFIG_SYS_FSL_SEC_ADDR + CONFIG_SYS_FSL_JR0_OFFSET)"
CONFIG_SYS_MAXARGS=64
CONFIG_REMAKE_ELF=y
CONFIG_SYS_PBSIZE="(CONFIG_SYS_CBSIZE + sizeof(CONFIG_SYS_PROMPT) + 16)"
CONFIG_BOARDDIR="board/variscite/imx8mm_var_dart"
CONFIG_SYS_MAX_FLASH_SECT=512
CONFIG_CMD_USB=y
CONFIG_MFG_ENV_SETTINGS="CONFIG_MFG_ENV_SETTINGS_DEFAULT "initrd_addr=0x438000000initrd_high=0xffffffffffffffff0emmc_dev=20sd_dev=10""
CONFIG_SYS_BOOT_RAMDISK_HIGH=y
CONFIG_LOADADDR=0x40480000
CONFIG_ETHPRIME="FEC"
CONFIG_FSL_USDHC=y
CONFIG_SYS_MMC_IMG_LOAD_PART=y
CONFIG_SYS_FSL_SEC_OFFSET="(0)"
CONFIG_SYS_INIT_RAM_SIZE=0x200000
CONFIG_SYS_BAUDRATE_TABLE="{ 9600, 19200, 38400, 57600, 115200 }"
CONFIG_VAL(option)="config_val(option)"
CONFIG_SYS_SDRAM_BASE=0x40000000
CONFIG_SYS_PROMPT_HUSH_PS2="> "
CONFIG_SYS_FSL_USDHC_NUM=2
CONFIG_SYS_INIT_SP_OFFSET="(CONFIG_SYS_INIT_RAM_SIZE - GENERATED_GBL_DATA_SIZE)"
CONFIG_SYS_INIT_RAM_ADDR=0x40000000
CONFIG_SPL_PAD_TO=$(CONFIG_SPL_MAX_SIZE)
CONFIG_EXTRA_ENV_SETTINGS="CONFIG_MFG_ENV_SETTINGS "bootdir=/boot0script=boot.scr0image=Image.gz0console=ttymxc0,1152000img_addr=0x420000000fdt_addr=0x430000000fdt_high=0xffffffffffffffff0boot_fdt=try0ip_dyn=yes0fdt_file=undefined0mmcdev=__stringify(CONFIG_SYS_MMC_ENV_DEV)"0mmcblk=10mmcautodetect=yes0mmcpart=10m4_addr=0x7e00000m4_bin=hello_world.bin0use_m4=no0loadm4bin=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bootdir}/${m4_bin}; cp.b ${loadaddr} ${m4_addr} ${filesize}0runm4bin=if test ${m4_addr} = 0x7e0000; then echo Booting M4 from TCM; else echo Booting M4 from DRAM; dcache flush; fi; bootaux ${m4_addr};0optargs=setenv bootargs ${bootargs} ${kernelargs};0mmcargs=setenv bootargs console=${console} root=/dev/mmcblk${mmcblk}p${mmcpart} rootwait rw ${cma_size}0 loadbootscript=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bootdir}/${script};0bootscript=echo Running bootscript from mmc ...; source0loadimage=load mmc ${mmcdev}:${mmcpart} ${img_addr} ${bootdir}/${image};unzip ${img_addr} ${loadaddr}0findfdt=if test $fdt_file = undefined; then if test $board_name = VAR-SOM-MX8M-MINI; then if test $carrier_rev = legacy; then setenv fdt_file imx8mm-var-som-symphony-legacy.dtb; else setenv fdt_file imx8mm-var-som-symphony.dtb; fi; else if test $carrier_rev = legacy; then setenv fdt_file imx8mm-var-dart-dt8mcustomboard-legacy.dtb; else setenv fdt_file imx8mm-var-dart-dt8mcustomboard.dtb; fi; fi; fi; 0loadfdt=run findfdt; echo fdt_file=${fdt_file}; load mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${bootdir}/${fdt_file}0ramsize_check=if test $sdram_size -le 512; then setenv cma_size cma=320M; else setenv cma_size cma=640M@1376M; fi;0mmcboot=echo Booting from mmc ...; run mmcargs; run optargs; if test ${boot_fdt} = yes || test ${boot_fdt} = try; then if run loadfdt; then booti ${loadaddr} - ${fdt_addr}; else echo WARN: Cannot load the DT; fi; else echo wait for boot; fi;0netargs=setenv bootargs console=${console} root=/dev/nfs ${cma_size} ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp0netboot=echo Booting from net ...; if test ${ip_dyn} = yes; then setenv get_cmd dhcp; else setenv get_cmd tftp; fi; ${get_cmd} ${img_addr} ${image}; unzip ${img_addr} ${loadaddr};run netargs; run optargs; if test ${boot_fdt} = yes || test ${boot_fdt} = try; then run findfdt; echo fdt_file=${fdt_file}; if ${get_cmd} ${fdt_addr} ${fdt_file}; then booti ${loadaddr} - ${fdt_addr}; else echo WARN: Cannot load the DT; fi; else booti; fi;0"
CONFIG_SYS_INIT_SP_ADDR="(CONFIG_SYS_INIT_RAM_ADDR + CONFIG_SYS_INIT_SP_OFFSET)"
CONFIG_MXC_UART_BASE="UART1_BASE_ADDR"
CONFIG_USBD_HS=y
CONFIG_USB_MAX_CONTROLLER_COUNT=2
CONFIG_CMD_READ=y
CONFIG_SPL_MAX_SIZE="(148 * 1024)"
CONFIG_SYS_MEMTEST_END="(CONFIG_SYS_MEMTEST_START + (DEFAULT_SDRAM_SIZE >> 1))"
CONFIG_USB_STORAGE=y
CONFIG_SYS_MEMTEST_START="PHYS_SDRAM"
CONFIG_LMB=y
CONFIG_FEC_XCV_TYPE="RGMII"
CONFIG_IS_ENABLED(option)="(config_enabled(CONFIG_VAL(option)) || config_enabled(CONFIG_VAL(option ##_MODULE)))"
CONFIG_SERIAL_TAG=y
CONFIG_SYS_UBOOT_BASE="(QSPI0_AMBA_BASE + CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR * 512)"
CONFIG_MFG_ENV_SETTINGS_DEFAULT=""mfgtool_args=setenv bootargs console=${console},${baudrate} rdinit=/linuxrc clk_ignore_unused 0kboot="MFG_BOOT_CMD"0bootcmd_mfg=run mfgtool_args;if iminfo ${initrd_addr}; then if test ${tee} = yes; then bootm ${tee_addr} ${initrd_addr} ${fdt_addr}; else " MFG_BOOT_CMD "${loadaddr} ${initrd_addr} ${fdt_addr}; fi; else " FASTBOOT_CMD "fi;0" MFG_NAND_FIT_PARTITION"
CONFIG_SYS_FSL_JR0_OFFSET="(0x1000)"
